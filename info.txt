Для реализации взаимодействия с API "https://sutochno.ru/" в Django с использованием Django REST Framework, вам потребуется выполнить несколько шагов. Ниже приведен пример кода, который поможет вам начать работу.

1. **Установите необходимые пакеты**:
   Убедитесь, что у вас установлены Django и Django REST Framework. Вы можете установить их с помощью pip:
   ```bash
   pip install django djangorestframework requests
   ```

2. **Создайте Django проект и приложение**:
   ```bash
   django-admin startproject myproject
   cd myproject
   django-admin startapp myapp
   ```

3. **Настройте проект**:
   В `settings.py` вашего проекта добавьте `rest_framework` в `INSTALLED_APPS`:
   ```python
   INSTALLED_APPS = [
       ...
       'rest_framework',
       'myapp',
   ]
   ```

4. **Создайте модель для хранения результатов поиска** (опционально):
   В `models.py` вашего приложения:
   ```python
   from django.db import models

   class SearchResult(models.Model):
       location = models.CharField(max_length=255)
       checkin = models.DateField()
       checkout = models.DateField()
       guests = models.IntegerField()
       result_data = models.JSONField()

       def __str__(self):
           return f"{self.location} ({self.checkin} - {self.checkout})"
   ```

5. **Создайте сериализатор для модели** (опционально):
   В `serializers.py` вашего приложения:
   ```python
   from rest_framework import serializers
   from .models import SearchResult

   class SearchResultSerializer(serializers.ModelSerializer):
       class Meta:
           model = SearchResult
           fields = '__all__'
   ```

6. **Создайте представление для взаимодействия с API**:
   В `views.py` вашего приложения:
   ```python
   import requests
   from rest_framework.views import APIView
   from rest_framework.response import Response
   from rest_framework import status
   from .models import SearchResult
   from .serializers import SearchResultSerializer

   class SearchAPIView(APIView):
       def get(self, request):
           location = request.query_params.get('location')
           checkin = request.query_params.get('checkin')
           checkout = request.query_params.get('checkout')
           guests = request.query_params.get('guests')

           # Замените 'your_api_key' на ваш реальный API ключ
           api_key = 'your_api_key'
           url = 'https://api.sutochno.ru/search'
           params = {
               'location': location,
               'checkin': checkin,
               'checkout': checkout,
               'guests': guests,
               'api_key': api_key
           }

           response = requests.get(url, params=params)

           if response.status_code == 200:
               data = response.json()
               search_result = SearchResult(
                   location=location,
                   checkin=checkin,
                   checkout=checkout,
                   guests=guests,
                   result_data=data
               )
               search_result.save()
               serializer = SearchResultSerializer(search_result)
               return Response(serializer.data, status=status.HTTP_200_OK)
           else:
               return Response({'error': 'Failed to fetch data from API'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
   ```

7. **Настройте URL-адреса**:
   В `urls.py` вашего проекта:
   ```python
   from django.contrib import admin
   from django.urls import path, include
   from myapp.views import SearchAPIView

   urlpatterns = [
       path('admin/', admin.site.urls),
       path('api/search/', SearchAPIView.as_view(), name='search-api'),
   ]
   ```

8. **Запустите сервер разработки**:
   ```bash
   python manage.py runserver
   ```

Теперь вы можете отправлять GET-запросы к `http://127.0.0.1:8000/api/search/` с параметрами `location`, `checkin`, `checkout` и `guests`, и ваше приложение будет взаимодействовать с API "https://sutochno.ru/", сохранять результаты в базу данных и возвращать их в ответе.



Для стилизации вашего Django-приложения с использованием Bootstrap и интеграции Swagger для документации API, вам потребуется выполнить несколько шагов. Ниже приведены инструкции для каждого из этих компонентов.

### 1. Использование Bootstrap

Bootstrap — это мощный инструмент для создания отзывчивых и стильных веб-интерфейсов. Вот как вы можете интегрировать его в ваше Django-приложение:

#### Установка Bootstrap

1. **Подключите Bootstrap через CDN**:
   Включите следующие строки в ваш базовый шаблон HTML (например, `base.html`), чтобы подключить CSS и JavaScript файлы Bootstrap:

   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>{% block title %}My Site{% endblock %}</title>
       <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
       <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
   </head>
   <body>
       <div class="container">
           {% block content %}{% endblock %}
       </div>
   </body>
   </html>
   ```

2. **Использование Bootstrap в шаблонах**:
   Теперь вы можете использовать классы Bootstrap в ваших HTML шаблонах. Например, для формы поиска:

   ```html
   {% extends 'base.html' %}
   {% block content %}
   <div class="container mt-5">
       <form method="post" class="form">
           {% csrf_token %}
           <div class="mb-3">
               <label for="location" class="form-label">Location</label>
               <input type="text" class="form-control" id="location" name="location">
           </div>
           <div class="mb-3">
               <label for="checkin" class="form-label">Check-in</label>
               <input type="date" class="form-control" id="checkin" name="checkin">
           </div>
           <div class="mb-3">
               <label for="checkout" class="form-label">Check-out</label>
               <input type="date" class="form-control" id="checkout" name="checkout">
           </div>
           <div class="mb-3">
               <label for="guests" class="form-label">Guests</label>
               <input type="number" class="form-control" id="guests" name="guests">
           </div>
           <button type="submit" class="btn btn-primary">Search</button>
       </form>
   </div>
   {% endblock %}
   ```

### 2. Интеграция Swagger для документации API

Swagger (теперь часть OpenAPI Initiative) позволяет вам документировать и тестировать ваши API прямо в браузере. В Django для этого можно использовать библиотеку `drf-yasg` (Django REST Framework Yet Another Swagger Generator).

#### Установка и настройка `drf-yasg`

1. **Установите `drf-yasg`**:
   ```bash
   pip install drf-yasg
   ```

2. **Настройте `drf-yasg` в `settings.py`**:
   Добавьте `drf_yasg` в `INSTALLED_APPS`:

   ```python
   INSTALLED_APPS = [
       ...
       'drf_yasg',
   ]
   ```

3. **Настройте URL для Swagger**:
   В `urls.py` добавьте маршруты для Swagger и ReDoc:

   ```python
   from django.urls import path, include
   from rest_framework import permissions
   from drf_yasg.views import get_schema_view
   from drf_yasg import openapi

   schema_view = get_schema_view(
      openapi.Info(
         title="Your API",
         default_version='v1',
         description="Your API Description",
         terms_of_service="https://www.yourapp.com/terms/",
         contact=openapi.Contact(email="contact@yourapp.com"),
         license=openapi.License(name="Your License"),
      ),
      public=True,
      permission_classes=(permissions.AllowAny,),
   )

   urlpatterns = [
      path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
      path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
      ...
   ]
   ```

Теперь, когда вы запустите ваш сервер, вы сможете получить доступ к документации вашего API по адресам `/swagger/` и `/redoc/`.

Эти инструкции помогут вам интегрировать Bootstrap для стилизации вашего приложения и Swagger для документирования вашего API в Django.
